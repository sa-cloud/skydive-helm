apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-analyzer
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      annotations:
        productName: {{ .Chart.Name }}
        productID: 8e6bdbcba44f46939c3d1c54447386b2
        productVersion: {{ .Chart.Version }}
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        tier: analyzer
    spec:
      serviceAccountName: skydive-service-account
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      hostPID: true
      hostIPC: true
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      affinity:
        {{- include "nodeaffinity" . | indent 6 }}
      {{- if .Values.image.secretName }}
      {{- if ne .Values.image.secretName ""}}
      imagePullSecrets:
      - name: {{ .Values.image.secretName }}
      {{- end }}
      {{- end }}      
      containers:
      - name: skydive-analyzer
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ default "" .Values.image.imagePullPolicy | quote }}
        terminationMessagePolicy: FallbackToLogsOnError
        args:
        - analyzer
        - --listen=0.0.0.0:{{ .Values.service.port }}
        ports:
        - containerPort: {{ .Values.service.port }}
        - containerPort: {{ .Values.service.port }}
          protocol: UDP
        - containerPort: {{ .Values.etcd.port }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: false
          runAsUser: 0
          capabilities:
                add:
                - SYS_ADMIN
                - SYS_RESOURCE
                - SYS_TIME
                - NET_BROADCAST
                - NET_ADMIN
        readinessProbe:
          httpGet:
            port: {{ .Values.service.port }}
            path: /api/status
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            port: {{ .Values.service.port }}
            path: /api/status
          initialDelaySeconds: 20
          periodSeconds: 10
          failureThreshold: 10
        env:
        - name: SKYDIVE_UI
          value: '{"theme":"light","k8s_enabled":"true"}'
        - name: SKYDIVE_ANALYZER_TOPOLOGY_PROBES
          value: "k8s"
      {{- if .Values.persistence.enabled }}
        - name: SKYDIVE_ANALYZER_FLOW_BACKEND
          value: "elasticsearchflow"
        - name: SKYDIVE_ANALYZER_TOPOLOGY_BACKEND
          value: "elasticsearchtopology"
        - name: SKYDIVE_STORAGE_ELASTICSEARCHFLOW_DRIVER
          value: "elasticsearch"
        - name: SKYDIVE_STORAGE_ELASTICSEARCHFLOW_HOST
          value: {{ .Values.storage.elasticsearch.host }}:{{ .Values.storage.elasticsearch.port }}
        - name: SKYDIVE_STORAGE_ELASTICSEARCHFLOW_INDICES_TO_KEEP
          value: {{ .Values.storage.flows.indicesToKeep | quote }}
        - name: SKYDIVE_STORAGE_ELASTICSEARCHFLOW_INDEX_ENTRIES_LIMIT
          value: {{ .Values.storage.flows.indexEntriesLimit | quote }}
        - name: SKYDIVE_STORAGE_ELASTICSEARCHFLOW_MAXCONNS
          value: "10"
        - name: SKYDIVE_STORAGE_ELASTICSEARCHTOPOLOGY_DRIVER
          value: "elasticsearch"
        - name: SKYDIVE_STORAGE_ELASTICSEARCHFLOW_BULK_MAXDOCS
          value: "1000"
        - name: SKYDIVE_STORAGE_ELASTICSEARCHFLOW_BULK_MAXDELAY
          value: "10"
        - name: SKYDIVE_STORAGE_ELASTICSEARCHFLOW_RETRY
          value: "5"
        - name: SKYDIVE_STORAGE_ELASTICSEARCHTOPOLOGY_HOST
          value: {{ .Values.storage.elasticsearch.host }}:{{ .Values.storage.elasticsearch.port }}
        - name: SKYDIVE_STORAGE_ELASTICSEARCHTOPOLOGY_INDICES_TO_KEEP
          value: {{ .Values.storage.topology.indicesToKeep | quote }}
        - name: SKYDIVE_STORAGE_ELASTICSEARCHTOPOLOGY_INDEX_ENTRIES_LIMIT
          value: {{ .Values.storage.topology.indexEntriesLimit | quote }}
        - name: SKYDIVE_STORAGE_ELASTICSEARCHTOPOLOGY_MAXCONNS
          value: "10"
        - name: SKYDIVE_STORAGE_ELASTICSEARCHTOPOLOGY_BULK_MAXDOCS
          value: "1000"  
        - name: SKYDIVE_STORAGE_ELASTICSEARCHTOPOLOGY_BULK_MAXDELAY
          value: "10"  
        - name: SKYDIVE_STORAGE_ELASTICSEARCHTOPOLOGY_RETRY
          value: "5"        
      {{- end }}
        - name: SKYDIVE_EMBEDDED
          value: "true"
        - name: SKYDIVE_FLOW_PROTOCOL
          value: "websocket"
        - name: SKYDIVE_ANALYZER_TOPOLOGY_FABRIC
          value: {{ .Values.analyzer.topology.fabric }}
      {{- if .Values.env }}
{{ toYaml .Values.env | indent 8 }}
      {{- end }}
{{- if .Values.exporter.enabled }}
  {{- if .Values.exporter.env }}
{{ toYaml .Values.exporter.env | indent 8 }}
  {{- end }}
{{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - name: ssl
          mountPath: /etc/ssl/certs
{{- if .Values.exporter.enabled }}
      - name: skydive-exporter
        image: {{ .Values.exporter.image.repository }}:{{ .Values.exporter.image.tag }}
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
        env:
        - name: SKYDIVE_ANALYZERS
          value: {{ template "fullname" . }}-service:{{ .Values.service.port }}
        - name: SKYDIVE_PIPELINE_SUBSCRIBER_URL
          value: ws://{{ template "fullname" . }}-service:{{ .Values.service.port }}/ws/subscriber/flow
        - name: SKYDIVE_PIPELINE_STORE_BUFFERED_FILENAME_PREFIX
          valueFrom:
            configMapKeyRef:
              name: skydive-exporter-s3-configuration
              key: "objectPrefix"
        - name: SKYDIVE_PIPELINE_WRITE_S3_ENDPOINT
          valueFrom: 
            configMapKeyRef:
               name: "skydive-exporter-s3-configuration"
               key: "endpoint"
        - name: SKYDIVE_PIPELINE_WRITE_S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "skydive-exporter-secret"
              key: "accesskey"
        - name: SKYDIVE_PIPELINE_WRITE_S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "skydive-exporter-secret"
              key: "secretkey"
      {{- if .Values.exporter.write.s3.use_api_key }}
        - name: SKYDIVE_PIPELINE_WRITE_S3_API_KEY
          valueFrom:
            secretKeyRef:
              name: "skydive-exporter-secret"
              key: "apikey"
        - name: SKYDIVE_PIPELINE_WRITE_S3_IAM_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: "skydive-exporter-s3-configuration"
              key: "iam_endpoint"
      {{- end }} 
        - name: SKYDIVE_PIPELINE_STORE_BUFFERED_DIRNAME
          valueFrom:
            configMapKeyRef:
              name: "skydive-exporter-s3-configuration"
              key: "bucket"
        - name: SKYDIVE_PIPELINE_WRITE_S3_REGION
          valueFrom:
            configMapKeyRef:
              name: "skydive-exporter-s3-configuration"
              key: "region"
        - name: SKYDIVE_PIPELINE_CLASSIFY_TYPE
          valueFrom:
            configMapKeyRef:
              name: "skydive-exporter-s3-configuration"
              key: "netmasksAutodiscoveryType"
        - name: SKYDIVE_PIPELINE_CLASSIFY_CLUSTER_NET_MASKS
          valueFrom:
            configMapKeyRef:
              name: "skydive-exporter-s3-configuration"
              key: "netmasks"
      {{- if .Values.exporter.env_exporter }}
{{ toYaml .Values.exporter.env_exporter | indent 8 }}
      {{- end }}
{{- end }}
     {{- if and .Values.exporter.enabled .Values.exporter.write.s3.installLocalMinio }}
      - name: skydive-minio
        image: {{ .Values.exporter.write.s3.minioImage }}:{{ .Values.exporter.write.s3.minioImageTag }}
        ports:
        - name: skydive-minio
          containerPort: 9000
        env:
        - name: MINIO_ACCESS_KEY
          value: {{ .Values.exporter.write.s3.access_key }}
        - name: MINIO_SECRET_KEY
          value: {{ .Values.exporter.write.s3.secret_key }}
        - name: MINIO_DEFAULT_BUCKETS
          value: {{ .Values.exporter.store.bucket }}
        - name: MINIO_REGION_NAME
          value: {{ .Values.exporter.write.s3.region }}
        volumeMounts:
        - name: "data"
          mountPath: "/data"
    {{- end }}
    {{- if .Values.persistence.enabled }}
      - name: skydive-elasticsearch
        image: {{ .Values.elasticsearch.image.repository }}:{{ .Values.elasticsearch.image.tag }}
        ports:
        - containerPort: {{ .Values.storage.elasticsearch.port }}
        readinessProbe:
          httpGet:
            port: {{ .Values.storage.elasticsearch.port }}
            path: /
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            port: {{ .Values.storage.elasticsearch.port }}
            path: /
          initialDelaySeconds: 20
          periodSeconds: 10
          failureThreshold: 10
        env:
        - name: network.host
          value: "0.0.0.0"
        - name: xpack.security.enabled
          value: "false" 
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - name: "{{ template "fullname" . }}-{{ .Values.dataVolume.name }}"
          mountPath: /usr/share/elasticsearch/data
    {{- end }}      
      volumes:
    {{- if .Values.persistence.enabled }}  
      - name: "{{ template "fullname" . }}-{{ .Values.dataVolume.name }}"   
        persistentVolumeClaim:
        {{- if .Values.dataVolume.existingClaimName }}
          claimName: {{ .Values.dataVolume.existingClaimName }}
        {{- else }}
          claimName: {{ template "fullname" . }}-{{ .Values.dataVolume.name }}
        {{- end }}
    {{- end }}
      - name: ssl
        hostPath:
          path: /etc/ssl/certs
     {{- if and .Values.exporter.enabled .Values.exporter.write.s3.installLocalMinio }}
      - name: data
        emptyDir: {}
    {{- end }}
